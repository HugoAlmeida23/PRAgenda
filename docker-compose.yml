# PRAgenda/docker-compose.yml
# version: '3.8' # Obsolete, can be removed

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mailhog: # Optional: For local email testing
    image: mailhog/mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI

  backend:
    build:
      context: . 
      dockerfile: Dockerfile.backend
    command: >
      sh -c "echo 'Waiting for Redis...' && while ! nc -z redis 6379; do sleep 1; done; echo 'Redis started.' &&
             echo 'Running migrations...' && python3 manage.py migrate &&
             echo 'Starting Gunicorn...' &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --log-level debug"
    volumes:
      - ./backend/:/app/ # Mount your backend code for live changes in dev
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env 
    depends_on: 
      redis:
        condition: service_healthy
      mailhog: 
        condition: service_started
    # No 'db' dependency as we are using external Supabase

  celeryworker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    # Note: backend.celery should point to the location of your Celery app instance
    # If your celery.py is in backend/backend/celery.py, and your Django project is 'backend'
    # then 'backend.celery' is correct assuming /app is in PYTHONPATH.
    command: python3 -m celery -A backend.celery worker -l info 
    volumes:
      - ./backend/:/app/
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_healthy
      # backend: # Not a strict startup dependency for worker if tasks don't immediately need live web server
      #   condition: service_started 
    # Worker will connect to Supabase via Django ORM for DB tasks

  celerybeat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python3 -m celery -A backend.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend/:/app/
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_healthy
      # backend: # Beat might need Django app ready if DatabaseScheduler interacts heavily on startup
      #   condition: service_started
    # Beat will connect to Supabase for DatabaseScheduler

  frontend:
    build:
      context: . 
      dockerfile: Dockerfile.frontend
      args:
        # This URL is used by Vite AT BUILD TIME inside the frontend container.
        # If your Nginx in frontend container will proxy /api to backend:8000, use VITE_API_URL=/api
        # If frontend built code makes direct calls to backend:8000, use VITE_API_URL=http://backend:8000/api
        # For calls from user's browser to localhost:8000, use VITE_API_URL=http://localhost:8000/api
        VITE_API_URL: http://localhost:8000/api 
    ports:
      - "5173:80" 
    depends_on: # Frontend doesn't strictly depend on backend to *build*, but often to *run*
      - backend

volumes: {} # No local postgres volume if using Supabase