services:
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: >
      sh -c "echo 'Waiting for Redis...' && while ! nc -z redis 6379; do sleep 1; done; echo 'Redis started.' &&
             echo 'Running migrations...' && python3 manage.py migrate &&
             echo 'Collecting static files...' && python3 manage.py collectstatic --noinput &&
             echo 'Starting Gunicorn...' &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --log-level info"
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    
  celeryworker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python3 -m celery -A backend.celery worker -l info
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    
  celerybeat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python3 -m celery -A backend.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    
  # The 'frontend' service is GONE. It's now part of the 'nginx' build process.
    
  nginx:
    # We now BUILD the nginx service using our new Dockerfile
    build:
      context: .
      dockerfile: Dockerfile.nginx
      args:
        # Pass the API URL to the frontend build stage inside Dockerfile.nginx
        VITE_API_URL: /api
    ports:
      - "80:80"
    depends_on:
      - backend # It only needs to wait for the backend now
    restart: unless-stopped
